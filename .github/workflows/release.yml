# ÂèëÂ∏ÉÂ∑•‰ΩúÊµÅ - Ëá™Âä®ÊûÑÂª∫ÂíåÂèëÂ∏É
name: Release

on:
  push:
    tags:
      - 'v*'  # ÂΩìÊé®ÈÄÅÁâàÊú¨Ê†áÁ≠æÊó∂Ëß¶ÂèëÔºåÂ¶Ç v1.0.0
  workflow_dispatch:  # ÂÖÅËÆ∏ÊâãÂä®Ëß¶Âèë

jobs:
  # ÂàõÂª∫ GitHub Release
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Ëé∑ÂèñÊúÄÊñ∞ÁöÑ‰∏§‰∏™Ê†áÁ≠æ‰πãÈó¥ÁöÑÊèê‰∫§
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -z "$PREV_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" --since="30 days ago")
        else
          CHANGELOG=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD)
        fi
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## üöÄ Êñ∞ÁâàÊú¨ÂèëÂ∏É ${{ steps.get_version.outputs.VERSION }}

          ### üìù Êõ¥Êñ∞Êó•Âøó
          ${{ steps.changelog.outputs.CHANGELOG }}

          ### üì¶ ‰∏ãËΩΩ
          - **Windows**: `Leizi-Terminal-Setup-${{ steps.get_version.outputs.VERSION }}.exe`
          - **macOS**: `Leizi-Terminal-${{ steps.get_version.outputs.VERSION }}.dmg`
          - **Linux**: `Leizi-Terminal-${{ steps.get_version.outputs.VERSION }}.AppImage`

          ### üõ†Ô∏è Á≥ªÁªüË¶ÅÊ±Ç
          - Windows 10 ÊàñÊõ¥È´òÁâàÊú¨
          - macOS 10.15 ÊàñÊõ¥È´òÁâàÊú¨
          - Ubuntu 18.04 ÊàñÊõ¥È´òÁâàÊú¨

          ÊÑüË∞¢ÊâÄÊúâË¥°ÁåÆËÄÖÔºÅüéâ
        draft: false
        prerelease: false

  # ÊûÑÂª∫Ë∑®Âπ≥Âè∞Â∫îÁî®
  build:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: windows-latest
            platform: win32
            arch: x64
          - os: macos-latest
            platform: darwin
            arch: x64

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: pip install -r requirements.txt

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxkbcommon-dev libxss1 libasound2-dev

    - name: Build Electron app
      working-directory: ./frontend
      run: npm run electron:build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CSC_IDENTITY_AUTO_DISCOVERY: false  # Á¶ÅÁî® macOS ‰ª£Á†ÅÁ≠æÂêç

    - name: Get version
      id: get_version
      shell: bash
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

    # Windows
    - name: Upload Windows installer
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: frontend/dist/Leizi Terminal Setup ${{ steps.get_version.outputs.VERSION }}.exe
        asset_name: Leizi-Terminal-Setup-${{ steps.get_version.outputs.VERSION }}.exe
        asset_content_type: application/octet-stream

    # macOS
    - name: Upload macOS DMG
      if: matrix.os == 'macos-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: frontend/dist/Leizi Terminal-${{ steps.get_version.outputs.VERSION }}.dmg
        asset_name: Leizi-Terminal-${{ steps.get_version.outputs.VERSION }}.dmg
        asset_content_type: application/octet-stream

    # Linux
    - name: Upload Linux AppImage
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: frontend/dist/Leizi Terminal-${{ steps.get_version.outputs.VERSION }}.AppImage
        asset_name: Leizi-Terminal-${{ steps.get_version.outputs.VERSION }}.AppImage
        asset_content_type: application/octet-stream

  # ÂèëÂ∏ÉÂêéÈÄöÁü•
  notify:
    needs: [create-release, build]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Release notification
      run: |
        echo "üéâ Release completed!"
        echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${GITHUB_REF/refs\/tags\//}"